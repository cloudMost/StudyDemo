@{ 
    Layout = null;
}
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.11.3.min.js"></script>
<script src="~/Scripts/knockout-3.4.0.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>

@*<script id="PageTemple" type="text/html">
    <nav>
        <ul class="pagination">
            <li>
                <a href="#" aria-label="首页">
                    <span aria-hidden="true">首页</span>
                </a>
            </li>
            <li>
                <a href="#" aria-label="上一页">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            <li><a href="#">1</a></li>
            <li><a href="#">2</a></li>
            <li><a href="#">3</a></li>
            <li><a href="#">4</a></li>
            <li><a href="#">5</a></li>
            <li>
                <a href="#" aria-label="下一页">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            <li>
                <a href="#" aria-label="未页">
                    <span aria-hidden="true">未页</span>
                </a>
            </li>
        </ul>
    </nav>
</script>
<div id="box" data-bind="template:'PageTemple'">

</div>
<script type="text/javascript">
    function paginationViewModel(pageSize, goToPageHandler) {
        var self = this,
            pagerCount = 8;//如果分页的页面太多，截取部分页面进行显示，默认设置显示9个页面
        self.pageSize = pageSize;//每页显示的记录数
        self.currentPage = ko.observable(1);//当前页面Index
        self.jumpPage = ko.observable(1);//需要跳转的页面的Index
        self.pageCount = ko.observable(0);//总页数
        self.showStartPagerDot = ko.observable(false);//页面开始部分是否显示点号
        self.showEndPagerDot = ko.observable(false);//页面结束部分是否显示点号
        self.pages = ko.observable([]);//需要显示的页面数量
        //计算需要显示的页面的页码
        self.caculatePages = function () {
            var result = [], pagerCount = 8, start = 1, end = pagerCount;
            if (self.currentPage() >= pagerCount) {
                start = self.currentPage() - Math.floor(pagerCount / 2);
                self.showStartPagerDot(true);
            } else {
                self.showStartPagerDot(false);
            };
            end = start + pagerCount - 1;
            if (end > self.pageCount()) {
                end = self.pageCount();
                self.showEndPagerDot(false);
            } else {
                self.showEndPagerDot(true);
            };

            for (var i = start; i <= end; i++) {
                result.push(i);
            };
            self.pages(result);
        }
        //总页数
        self.formatedPageCount = ko.computed(function () {
            return "共" + self.pageCount() + "页";
        });
        //页面跳转
        self.goToPageHandler = goToPageHandler;
        self.goToPage = function (page) {
            if (typeof self.goToPageHandler == "function") {
                self.goToPageHandler.call(self, page - 1, function (data) {
                    self.pageCount(Math.ceil(data.count / self.pageSize));
                    self.currentPage(page);
                    self.jumpPage(null);
                    self.caculatePages();
                });

            };
        };
        //回到首页
        self.goToFirst = function () {
            self.goToPage(1);
        };
        //跳转到最后一页
        self.goToLast = function () {
            self.goToPage(self.pageCount());
        };
        //上一页

        self.goToPrev = function () {
            var cur = self.currentPage();
            if (cur > 1) {
                self.goToPage(cur - 1);
            };
        };
        //下一页
        self.goToNext = function () {
            var cur = self.currentPage();
            if (cur < self.pageCount()) {
                self.goToPage(cur + 1);
            };
        };
        //跳转
        self.jump = function () {
            var page = self.jumpPage();
            if (page > 0 && page <= self.pageCount()) {
                self.goToPage(page);
            };
        };
    };
    $.ajax({
        url: 'Api/OrangizeApi/GetData',
        data: {
            userName: self.userName() || "",
            quaName: self.quaName() || "",
            pageIndex: page,
            pageSize: self.pageSize
        },
        success: function (data) {
            pageHandler.call(self, data);
            self.userQuas($.map(data.list || [], function (r) { return new userQuaModel(r); }));
        }

    });
    //paginationViewModel.apply(self, [10, function (page, pageHandler) {
    //    ajaxQueue.Request("UserQuaList", {
    //        url: self.baseUri,
    //        data: {
    //            userName: self.userName() || "",
    //            quaName: self.quaName() || "",
    //            pageIndex: page,
    //            pageSize: self.pageSize
    //        },
    //        success: function (data) {
    //            pageHandler.call(self, data);
    //            self.userQuas($.map(data.list || [], function (r) { return new userQuaModel(r); }));
    //        }
    //    }).Run();
    //}]);
</script>*@


<h2>Participants</h2>
Here are the participants:
<div data-bind="template: { name: 'person-template', foreach: people }"></div>

<script type="text/html" id="person-template">
    <h3 data-bind="text: name"></h3>
    <p>Credits: <span data-bind="text: credits"></span></p>
</script>
<script>
    function MyViewModel() {
        this.people = [
            { name: 'Franklin', credits: 250 },
            { name: 'Mario', credits: 5800 }
        ]
    }
    ko.applyBindings(new MyViewModel());
</script>

